NAME
    Scalar::Defer - Lazy evaluation in Perl

SYNOPSIS
        use Scalar::Defer; # exports 'defer', 'lazy' and 'force'

        my ($x, $y);
        my $dv = defer { ++$x };    # a deferred value (not memoized)
        my $lv = lazy { ++$y };     # a lazy value (memoized)

        print "$dv $dv $dv"; # 1 2 3
        print "$lv $lv $lv"; # 1 1 1

        my $forced = force $dv;     # force a normal value out of $dv

        print "$forced $forced $forced"; # 4 4 4

DESCRIPTION
    This module exports two functions, "defer" and "lazy", for constructing
    values that are evaluated on demand. It also exports a "force" function
    to force evaluation of a deferred value.

  defer {...}
    Takes a block or a code reference, and returns a deferred value. Each
    time that value is demanded, the block is evaluated again to yield a
    fresh result.

  lazy {...}
    Like "defer", except the value is computed at most once. Subsequent
    evaluation will simply use the cached result.

  force $value
    Force evaluation of a deferred value to return a normal value. If $value
    was already a normal value, then "force" simply returns it.

  is_deferred $value
    Tells whether the argument is a deferred value or not. (Lazy values are
    deferred too.)

    The "is_deferred" function is not exported by default; to import it,
    name it explicitly in the import list.

NOTES
    Deferred values are not considered objects ("ref" on them returns 0),
    although you can still call methods on them, in which case the invocant
    is always the forced value.

    Unlike the "tie"-based Data::Lazy, this module operates on *values*, not
    *variables*. Therefore, assigning another value into $dv and $lv above
    will simply replace the value, instead of triggering a "STORE" method
    call.

    Similarily, assigning $dv or $dv into another variable will not trigger
    a "FETCH" method, but simply propagates the deferred value over without
    evaluationg. This makes it much faster than a "tie"-based implementation
    -- even under the worst case scenario, where it's always immediately
    forced after creation, this module is still twice as fast than
    Data::Lazy.

CAVEATS
    Bad things may happen if this module interacts with any other code which
    fiddles with package 0.

SEE ALSO
    Data::Thunk, which implements "lazy" values that can replace itself upon
    forcing, leaving a minimal trace of the thunk, with some sneaky XS magic
    in Data::Swap.

AUTHORS
    Audrey Tang <cpan@audreyt.org>

COPYRIGHT
    Copyright 2006, 2007, 2008 by Audrey Tang <cpan@audreyt.org>.

    This software is released under the MIT license cited below.

  The "MIT" License
    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

